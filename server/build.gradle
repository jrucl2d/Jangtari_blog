buildscript {
    ext {
        springBootVersion = '2.2.5.RELEASE'
        querydslPluginVersion = '1.0.10'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } // plugin 저장소
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath "io.spring.gradle:dependency-management-plugin:1.0.7.RELEASE"
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:${querydslPluginVersion}")
        classpath "com.moowork.gradle:gradle-node-plugin:1.3.1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.4.1'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id "com.moowork.node" version "1.3.1"
}

apply plugin: "com.ewerk.gradle.plugins.querydsl"
apply plugin: "com.moowork.node"

group = 'com.yu'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

def webappDir = "$projectDir/frontend/webtoon"

// node 버전 및 npm, node 설치파일 저장 디렉토리 명시
node {
    version = '12.18.3'
    npmVersion = '6.14.10'
    distBaseUrl = 'https://nodejs.org/dist'
    download = false
    workDir = file("${project.buildDir}/nodejs")
    npmWorkDir = file("${project.buildDir}/npm")
    yarnWorkDir = file("${project.buildDir}/yarn")
    nodeModulesDir = file("${project.projectDir}")
}

// npm install 과정
task appNpmInstall(type: NpmTask) {
    workingDir = file("${project.projectDir}/frontend/front")
    args = ["install"]
}

// yarn build
task yarnBuild(type: YarnTask) {
    workingDir = file("${project.projectDir}/frontend/front")
    args = ['build']
}

// 빌드된 결과 resources로 이동
task copyWebApp(type: Copy) {
    from "frontend/front/build"
    into 'build/resources/main/static/.'
}

yarnBuild.dependsOn appNpmInstall
copyWebApp.dependsOn yarnBuild
compileJava.dependsOn copyWebApp

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    compile('org.springframework.boot:spring-boot-starter-data-redis') // spring-data-redis
    compile group: 'it.ozimov', name: 'embedded-redis', version: '0.7.2' //embedded-redis
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation('junit:junit:4.13')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile('org.springframework.security:spring-security-test')
    compile("com.querydsl:querydsl-jpa") // querydsl
    compile("com.querydsl:querydsl-apt") // querydsl

    compile group: 'com.google.oauth-client', name: 'google-oauth-client-jetty', version: '1.31.2'
    compile 'com.google.api-client:google-api-client:1.23.0'
    compile 'com.google.apis:google-api-services-drive:v3-rev110-1.23.0'
}

def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
    }
}

compileQuerydsl{
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    querydsl.extendsFrom compileClasspath
}

test {
    useJUnitPlatform()
}
